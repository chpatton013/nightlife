#!/usr/bin/env python3

import argparse
import logging
import os
import sys

from cryptography.hazmat.primitives.serialization import (
    BestAvailableEncryption,
    Encoding,
    NoEncryption,
    PrivateFormat,
    PublicFormat,
)
from cryptography.hazmat.primitives.asymmetric.ed25519 import (
    Ed25519PrivateKey,
)


def generate_keys(password: bytes | None) -> (bytes, bytes):
    privkey = Ed25519PrivateKey.generate()
    privkey_bytes = privkey.private_bytes(
        Encoding.PEM,
        PrivateFormat.PKCS8,
        BestAvailableEncryption(password) if password else NoEncryption(),
    )

    pubkey = privkey.public_key()
    pubkey_bytes = pubkey.public_bytes(Encoding.PEM, PublicFormat.SubjectPublicKeyInfo)

    return privkey_bytes, pubkey_bytes


if __name__ == "__main__":
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s|%(levelname)s] %(message)s",
        datefmt="%Y-%m-%d %H:%M:%S",
    )

    parser = argparse.ArgumentParser()
    parser.add_argument("name")
    args = parser.parse_args()

    priv_file = f"{args.name}_ed25519"
    pub_file = f"{priv_file}.pub"

    password: bytes | None = None
    if sys.stdin:
        if sys.stdin.isatty():
            password = input(f"Enter encryption password for {priv_file} (or empty for no encryption):\n$ ").encode()
        else:
            logging.info("Reading private keyfile encryption password from stdin")
            password = sys.stdin.buffer.read()
    else:
        logging.info("stdin is closed")

    if not password:
        logging.info("Private keyfile will not be encrypted")

    privkey_bytes, pubkey_bytes = generate_keys(password or None)

    logging.info("Writing public keyfile %s", pub_file)
    with open(pub_file, "wb") as f:
        f.write(pubkey_bytes)

    logging.info("Writing private keyfile %s", priv_file)
    os.umask(0o077)
    with open(priv_file, "wb") as f:
        f.write(privkey_bytes)
