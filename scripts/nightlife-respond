#!/usr/bin/env python3

"""
List or invoke all topic handlers for the given topic name. Topic name may be
omitted when listing.

This tool is a command-line alternative to running an agent server, or (more
likely) a handler development/debugging aid.
"""

import argparse
import logging
import os
import sys

from nightlife.respond import RespondTool


def main() -> None:
    logging.basicConfig(
        level=logging.DEBUG if os.getenv("DEBUG") else logging.INFO,
        format="%(asctime)s|%(levelname)s] %(message)s",
        datefmt="%Y-%m-%d %H:%M:%S",
    )

    parser = argparse.ArgumentParser()
    parser.add_argument("action", choices=["list", "handle"])
    parser.add_argument("topic", default=None, nargs="?")
    args = parser.parse_args()

    respond = RespondTool()

    if args.action == "handle":
        if args.topic is None:
            parser.error("<topic> must be specified with 'handle'")
        payload: bytes | None = None
        if sys.stdin:
            logging.info("Reading input topic payload from stdin")
            payload = sys.stdin.buffer.read()
        sys.stdout.write(respond.handle_topic(args.topic, payload).model_dump_json())
    elif args.topic is None:
        sys.stdout.write(respond.topic_registry().model_dump_json())
    else:
        sys.stdout.write(respond.topic_handlers(args.topic).model_dump_json())


if __name__ == "__main__":
    main()
