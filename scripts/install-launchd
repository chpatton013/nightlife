#!/usr/bin/env python3

import argparse
import logging
import os
import subprocess
from dataclasses import dataclass

from nightlife.config import config_file, state_file


DEFAULT_TEMPLATE_DIR = config_file("nightlife", "templates")
DEFAULT_STATE_DIR = state_file("nightlife")
DEFAULT_SERVICE_DIR = os.path.join(os.path.expanduser("~"), "Library/LaunchAgents")


@dataclass
class ServiceTemplate:
    template: str
    label: str
    log_dir: str
    program_arguments: list[str]

    def render(self) -> str:
        program_arguments = "\n         ".join(
            f"<string>{arg}</string>" for arg in self.program_arguments
        )
        rendered = self.template[:]
        rendered = rendered.replace("{{label}}", self.label)
        rendered = rendered.replace("{{log_dir}}", self.log_dir)
        rendered = rendered.replace("{{program_arguments}}", program_arguments)
        return rendered


@dataclass
class Service:
    service_target: str
    program_arguments: list[str]
    template_dir: str
    service_dir: str
    state_dir: str

    def render(self, template: str) -> str:
        return ServiceTemplate(
            template=template,
            label=self.service_target,
            log_dir=os.path.join(self.state_dir, self.service_target),
            program_arguments=self.program_arguments,
        ).render()


def _template_path(template_dir: str) -> str:
    return os.path.join(template_dir, "macos/service.plist.in")


def _service_path(service_target: str, service_dir: str) -> str:
    return os.path.join(service_dir, f"{service_target}.plist")


def _install_service(service: Service) -> None:
    template_path = _template_path(service.template_dir)
    service_path = _service_path(service.service_target, service.service_dir)

    logging.debug("Reading service template from %s", template_path)
    with open(template_path, "r") as f:
        template = f.read()

    logging.debug("Rendering template")
    rendered = service.render(template)

    logging.debug("Writing rendered template to %s", service_path)
    with open(service_path, "w") as f:
        f.write(rendered)

    logging.debug("Starting service %s", service.service_target)
    subprocess.run(["launchctl", "start", service.service_target], check=True)


def _uninstall_service(service_target: str, service_dir: str) -> None:
    service_path = _service_path(service_target, service_dir)

    logging.debug("Stopping service %s", service_target)
    subprocess.run(["launchctl", "stop", service_target], check=True)

    logging.debug("Deleting service file %s", service_path)
    os.unlink(service_path)


def _server_target(server_name: str) -> str:
    return f"chpatton013.nightlife.server-{server_name}"


def install_server(args: argparse.Namespace) -> None:
    logging.info("Installing server %s...", args.server_name)
    service = Service(
        service_target=_server_target(args.server_name),
        program_arguments=[f"nightlife-{args.server_name}"],
        template_dir=args.template_dir,
        service_dir=args.service_dir,
        state_dir=args.state_dir,
    )
    _install_service(service)
    logging.info("Installed server %s", args.server_name)


def uninstall_server(args: argparse.Namespace) -> None:
    logging.info("Uninstalling server %s...", args.server_name)
    _uninstall_service(_server_target(args.server_name), args.service_dir)
    logging.info("Uninstalled server %s", args.server_name)


def _event_target(event_name: str) -> str:
    return f"chpatton013.nightlife.event-{event_name}"


def install_event(args: argparse.Namespace) -> None:
    logging.info("Installing event %s...", args.event_name)
    service = Service(
        service_target=_event_target(args.event_name),
        program_arguments=[
            args.run_under,
            f"nightlife-{args.event_name}",
            args.event_name,
        ],
        template_dir=args.template_dir,
        service_dir=args.service_dir,
        state_dir=args.state_dir,
    )
    _install_service(service)
    logging.info("Installed event %s", args.event_name)


def uninstall_event(args: argparse.Namespace) -> None:
    logging.info("Uninstalling event %s...", args.event_name)
    _uninstall_service(_event_target(args.event_name), args.service_dir)
    logging.info("Uninstalled event %s", args.event_name)


if __name__ == "__main__":
    logging.basicConfig(level=logging.DEBUG if os.getenv("DEBUG") else logging.INFO)

    parser = argparse.ArgumentParser()
    parser.add_argument("--service-dir", default=DEFAULT_SERVICE_DIR)
    subparsers = parser.add_subparsers(required=True)

    install_parser = subparsers.add_parser("install")
    install_parser.add_argument("--template-dir", default=DEFAULT_TEMPLATE_DIR)
    install_parser.add_argument("--state-dir", default=DEFAULT_STATE_DIR)
    install_subparsers = install_parser.add_subparsers(required=True)

    install_server_parser = install_subparsers.add_parser("server")
    install_server_parser.add_argument("server_name", choices=["principal", "agent"])
    install_server_parser.set_defaults(action=install_server)

    install_event_parser = install_subparsers.add_parser("event")
    install_event_parser.add_argument("event_name")
    install_event_parser.add_argument("--run-under", nargs="+")
    install_event_parser.set_defaults(action=install_event)

    uninstall_parser = subparsers.add_parser("uninstall")
    uninstall_subparsers = uninstall_parser.add_subparsers(required=True)

    uninstall_server_parser = uninstall_subparsers.add_parser("server")
    uninstall_server_parser.add_argument("server_name", choices=["principal", "agent"])
    uninstall_server_parser.set_defaults(action=uninstall_server)

    uninstall_event_parser = uninstall_subparsers.add_parser("event")
    uninstall_event_parser.add_argument("event_name")
    uninstall_event_parser.set_defaults(action=uninstall_event)

    args = parser.parse_args()
    args.func(args)
